import typing\\n\\nfrom that_depends.providers.base import AbstractProvider\\n\\n\\nT = typing.TypeVar('T')\\\\\n\\nclass List(AbstractProvider[list[T]]):\\n    __slots__ = ('_providers',)\\\\\n\\n    def __init__(self, *providers: AbstractProvider[T]) -> None:\\n        super().__init__()\\n        self._providers: typing.Final = providers\\n\\\\n    async def async_resolve(self) -> list[T]:\\n        return [await x.async_resolve() for x in self._providers] \\n\\\\n    def sync_resolve(self) -> list[T]:\\n        return [x.sync_resolve() for x in self._providers] \\n\\\\n    async def __call__(self) -> list[T]:\\n        return await self.async_resolve() \\n\\\\nclass Dict(AbstractProvider[dict[str, T]]):\\n    __slots__ = ('_providers',)\\\\\n\\n    def __init__(self, **providers: AbstractProvider[T]) -> None:\\n        super().__init__()\\n        self._providers: typing.Final = providers\\n\\\\n    async def async_resolve(self) -> dict[str, T]:\\n        return {key: await provider.async_resolve() for key, provider in self._providers.items()} \\n\\\\n    def sync_resolve(self) -> dict[str, T]:\\n        return {key: provider.sync_resolve() for key, provider in self._providers.items()} \\n